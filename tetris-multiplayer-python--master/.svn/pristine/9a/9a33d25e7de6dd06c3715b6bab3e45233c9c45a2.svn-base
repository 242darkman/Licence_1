\documentclass[a4paper,12pt]{article}
\usepackage[utf8]{inputenc}      % caractères français
\usepackage[T1]{fontenc}
\usepackage[french]{babel}  % langue
\usepackage{graphicx}         % images
\usepackage{verbatim}         % texte préformaté
\usepackage{amsfonts}
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{enumitem}
\usepackage{pifont}
\usepackage{soul}
\usepackage{multirow,multicol}
\usepackage{amsmath, amssymb, latexsym}
\usepackage{pstricks,pst-node,pst-coil,pst-grad,pst-plot}
\usepackage{epsfig,subfigure}
\usepackage{listings}



\title{\textbf{PROJET CONCEPTION LOGICIEL} \\ \textit{Développement d'un Tetris multijoueur}}      % renseigne le titre
\author{\textbf{VOUVOU} Brandon \\ \textbf{KABLAN} Miezan \\ \textbf{KASENGA} Deborah \\ \textbf{DEDEFA} Suzana}          
%\institute{Université de Caen Normandie}
\date{}

%\pagestyle{headings}          % affiche un rappel discret (en haut à gauche)
                              % de la partie dans laquel on se situe

\begin{document}
	\lstset{language=Python,numbers=left,numberstyle=\small}

\maketitle
\newpage
\tableofcontents
\newpage

\section{Introduction}
Au cours de ce second semestre de notre première année licence informatique, il était question pour nous de réaliser un projet dans le cadre du cours de Conception de logiciel. Le but de ce projet est de concevoir un jeu de bout en bout en langage python. Sur une liste de huit projets, nous avons choisis de travailler sur le jeu de Tetris que l’on pouvait réaliser avec le bibliothèque Pygame ou Tkinter. 
Une fois que notre choix a été fait, nous nous sommes documentés sur ce fameux afin de comprendre entièrement les règles du jeu. Ensuite nous avons fait le choix de la bibliothèque avec laquelle nous voulions concevoir le jeu ; et pour cela nous nous sommes penchés sur la bibliothèque \hl{Pygame}. Et pour finir, nous avons d’abord établi sur papier un plan de travail avant d’aborder directement le codage en python.


\section{OBJECTIFS DU PROJET}
	\subsection{But du projet}
Le but de ce projet était de réaliser une version multijoueur du célèbre jeu de Tetris. Dans celle-ci plusieurs joueurs s’affrontent, chacun ayant son propre champ de jeu, et réaliser des lignes. La première étape du projet étant d’implémenter le jeu avec une  interface graphique  et quelques  améliorations classiques comme {\color{blue}niveau de difficulté progressif}, {\color{blue}visualisation de la pièce suivante}. Et dans un second temps, il s’agissait d’implémenter un mode multijoueur local contre une IA ou un autre joueur sur écran partagé.

	\subsection{Présentation du jeu}
Le jeu du Tetris est un jeu dans lequel des pièces de différentes couleurs descendent du haut de l'écran. Ainsi lors de la chute des pièces le joueur ne peut pas ralentir leurs descentes  mais peut les accélérer et décider à quel angle de rotation, à quel emplacement latéral l'objet peut atterrir ou peut être placé. Lorsqu'une ligne est complétée c'est-à-dire lorsque toutes les cases à l'horizontal de la grille de jeu sont pleines, celles-ci disparaissent et les blocs supérieurs tombent. Si le joueur ne parvient pas à faire disparaître les lignes et que les pièces s'empilent jusqu'en haut de la grille, la partie se termine.

		\subsubsection{Le plateau}
Le plateau de jeu est souvent appelé "puit" ou "matrice". Il s'agit de l'espace dans lequel tombent les pièces. Il dispose toujours d'une grille en arrière-plan, visible ou non, dont les cases sont de la même grandeur que les carrés des pièces, et que celles-ci suivent dans leur chute. Il est également entouré par une armature appelée "tétrion", infranchissable, qui pose les limites du champs de jeu.

		\subsubsection{Principe du jeu}
Tetris se joue sur un quadrillage possédant une gravité (du haut vers le bas). Des formes géométriques, tombent depuis le haut de l'écran. Elles peuvent prendre plusieurs formes rotatives pour certaines et la rotation peut être faite à l'aide d'une touche quelconque du clavier selon la configuration effectuée.Le joueur doit ainsi placer les pièces dans la grille de jeu dans le but de remplir une ou plusieurs lignes. Les pièces tombent une par une, et fusionnent avec le reste des pièces déjà tombées une fois parvenues au bas de la grille. 
Le principe général du jeu de Tetris consiste à effacer des lignes de la lignes en remplissant les cases horizontales de la grille de jeu avec les différentes pièces qui tombent lors du jeu.

		\subsubsection{Les pièces}
Les pièces encore appelées les tétriminos, sont au nombre de 7 à savoir : \\
\includegraphics[width=16cm]{images/tetriminos.png}

		\subsubsection{Les Couleurs}
Les couleurs sont choisies aléatoirement de même que les pièces. Les différentes couleurs utilisées dans notre jeu sont le bleu, le vert, l'orange, le jaune, le rouge, le mauve, le bleu clair, le vert clair, l'orange clair, le jaune clair, le rouge clair, le mauve clair.

		\subsubsection{Les mouvements latéraux}
Le joueur à l'aide de certaines (selon la configuration) touches déplace latéralement les pièces, c'est-à-dire vers la droite ou vers le gauche. Cependant quand la pièce touche les bords du jeu, le déplacement n'est plus possible.

		\subsubsection{Les rotations}
Le joueur peut faire tourner plusieurs fois à gauche et/ou à droite, de 90{\degres} n'importe quel bloc pour le déposer de la façon désirée pendant que le bloc descend.

		\subsubsection{Le fonctionnement du jeu (À revoir !!!!!!!!!!!!!!)}
Les pièces générées se déplacent puis se fixent dans notre grille zéro.  C'est une grille de 22 x 12 petits carrés. Initialement la valeur des carrés est 0 étant donné qu'au départ ils sont vides. 
La boite contenant la grille a une largeur de 300, une longueur de 550 et la taille de la boite est de 25. La grille est créée de sorte que les pièces ne puissent pas en sortir. 
La vitesse de la chute des pièces varient selon le niveau atteint par le joueur. Plus le niveau est élevé, plus la vitesse augmente. Une fois que la première pièce arrive en bas, cette partie de la grille ne peut plus être accessible, en d'autres termes elle est bloquée. Et le joueur continue à placer ses pièces qui elles, tombent aléatoirement, jusqu'à ce qu'il réalise (forme) une ligne pleine qui sera effacée et fera évoluer son score. Lorsqu'une pièce est placée, une nouvelle est construite automatiquement, c'est celle qui est annoncée. Si une brique touche le sommet de la grille, par empilement, la partie s’arrête et le score est verrouillé : c’est la fin de la partie. 
		
		\subsubsection*{Travail attendu}
Pour pouvoir concevoir le jeu qui a été expliquer ci-dessus, nous avons plusieurs étapes à réaliser dans notre travail, la première est d’implémenter le jeu avec une interface graphique, en ajoutant un niveau de difficulté, progressif. Ensuite nous  allons améliorer  notre jeu en l'adaptant pour un multijoueur. Nous avons besoin d’une fenêtre que l’on peut considérer comme notre terrain de jeu, qui sera donc dimensionner, afin de pouvoir l’afficher sur l’écran. Dans ce terrain nous allons appliquer quelques lois, comme l’affichage des pièces et leur entrée d’une manière aléatoire , les couleurs qui sont données d’une manière aléatoire. Et il faudra de même ajouter des améliorations : Visualisation de la pièce suivante, déplacement des pièces, effectuer des rotations sur les pièces si possible. 
Une fois toutes ses parties finies, nous allons devoir l’appliquer à un jeu de multijoueur. Celui-ci demande de posséder deux grilles, une pour chaque joueur. Chacun ayant le contrôle sur sa grille de jeu à l'aide des touches du même clavier, configuré différemment.
Pour appliquer toutes ces règles, nous devons choisir une librairie beaucoup plus adapter à ce que nous voulons faire. Nous avons choisi Pygame car on s'était plus documenter sur cette bibliothèque que sur Tkinter. 



\section{FONCTIONNALITÉS IMPLÉMENTÉES \& ALGORITHMES}
	\subsection{DESCRIPTION DES FONCTIONNALITÉS}
		\subsubsection{Phases d'analyse et de conception (À revoir !!!!!!!!!!!!!!!!!!!!!!)}
La première phase a été de déterminer quelles allaient être les fonctions fondamentales dont nous aurions besoin dans notre programme. Aussi nous avons commencé par écrire les mots clefs du jeu tels que :
	\begin{itemize}
      \item Game over
      \item Interface clavier
      \item Affichage
      \item Effacer une ligne complète
      \item Dessiner une pièce
      \item Rotation d'une pièce
      \item Déplacer une pièce
      \item Supprimer une ligne
      \item Générer une ligne
      \item Gestion du temps
      \item Score
      \item Plateau
	\end{itemize}	
La seconde consistait à la rédaction du programme principale, c'est-à-dire l’enchaînement des fonctions qui allaient constituer les différentes étapes du programme. Et la troisième étape fut de choisir le codage des données: la grille et les pièces.	
\begin{center}
	\begin{figure}
		\includegraphics[width=10cm]{images/formes_pieces.png}
		\caption{Différentes pièces du Tetris et leur configuration}
	\end{figure}
\end{center}
Nous remarquons que chaque pièce est constituée de 4 cases et qu'une case repère qui permet de localiser la pièce et de gérer le déplacement de celle-ci.
\begin{itemize}
	\item La  grille  définit  l’espace  où  évoluent  les  pièces. Elle  doit  représenter  la  taille de l’espace d’évolution des pièces plus les contours pour pouvoir délimiter cet espace.  Ceci  nous  amène  à  une  grille  de  taille  12X22.
	
	\item L'interface avec le clavier fait aussi parti de nos choix : nous avons tout simplement choisi d'utiliser les touches directionnelles et la touche Ctrl pour faciliter l'utilisation du jeu, notamment pour déplacer les pièces.
\end{itemize}

	\subsection{Description de la classe GRILLE}
\textbf{\underline{Généralité :}} 
{\color{blue}Cette classe commence initialise notre grille de jeu, et implémente les fonctions permettant d'ajouter les différentes pièces dans la grille, de vérifier la présence ou non des éléments sur les lignes et colonnes de la grille, d'effacer les lignes complètes c'est-à-dire les lignes où chaque case contient un élément, et aussi de dessiner nos tétriminos dans la grille de jeu.} \\ \\
%Définition des variables globales (taille de la fenêtre nombres de lignes nombres de colonnes taille de la grille définition de la variable vide) définition des couleurs à l’aide des canaux RGB et créations de tuples contenant ces couleurs), création des différentes formes de pièces du jeu et aussi des lignes incomplètes 
initialisation de la grille on multiplie la variable vide par le nombre de lignes en fonction du nombre de colonnes : cette variable vide correspondant aux blancs dans la grille finale c'est-à-dire les lieux où il n’y a pas de pièces.

		\subsubsection{Fonction ajoutant un élément dans la grille (AjoutELEMENT)}
\begin{lstlisting}[frame=single] 
def AjoutELEMENT(self, piece): 
  FORME = PIECES[piece.getFORMEIndex()][piece.getPieceSuivante()] 
  LONGUEUR = len(FORME)
  LARGEUR = len(FORME[0])
        
  for y in range(LONGUEUR):
      for x in range(LARGEUR):
         if FORME[y][x] != VIDE:
             self.m_grille[y + int(piece.getPosY() / TAILLE_BOITE)][
      x + int(piece.getPosX() / TAILLE_BOITE)] = piece.getColor()
\end{lstlisting}

Ici la variable forme prend en compte deux éléments c'est-à-dire: la pièce suivante et la pièce tombante. \\ On donne comme valeur aux variables : largeur le premier élément de la liste forme c'est-à-dire l’index des pièces et longueur le nombre d’items que contient la variable forme ensuite on crée une double boucle dans laquelle on vérifie si la grille n’est pas vide elle contient des 0 alors on remplace ces 0 tout en prenant compte la taille de la boîte, la position en x et en y des pièces et on lui attribue une couleur de façon aléatoire tout ceci à l’aide des fonctions utilisées dans la prochaine classe {\color{green}PIECES} tel que (getposx, getcolorx, getposy)cette fonction ajoute juste les pièces a la grille puis l’affiche en fonction des lignes et des colonnes  mais la fonction qui dessine les pièces lorsqu’elle ne sont plus en chute et sont qu’elles sont posées dans la grille se nomme {\color{orange}dessinergrille} ,fonction qui sera expliquée dans la suite.

			\subsubsection{Fonction vérifiant les lignes complètes (lignecomplete):}
Cette fonction est destinée à faire un test ou plutôt a vérifier si la grille contient ou non des éléments dans les différentes lignes et colonnes de la grille. C'est une fonction qui sera utilisée par la suite dans la fonction {\color{orange}effacelignecomplete} afin de pouvoir effacer les lignes totalement pleine de notre grille de jeu. \\ On signifie ici que la fonction {\color{orange}lignecomplete} est complémentaire à la fonction {\color{orange}effacelignecomplete} dans la mesure où c’est elle qui nous permet de vérifier les lignes complètes afin de pouvoir les effacer 

			\subsubsection{Fonction effaçant les lignes complètes}
\begin{lstlisting}[frame=single] 
def effaceLigneComplete(self):
    y = COLONNES - 1
    nombreLignecomplete = 0

    while y >= 0:  
       if self.lignecomplete(y):
            nombreLignecomplete += 1

         for DansY in range(y, 0, -1):
             for x in range(LIGNES):
               self.m_grille[DansY][x] = self.m_grille[DansY - 1][x]
         for x in range(LIGNES):
                self.m_grille[0][x] = VIDE
       else:
           y -= 1

    return nombreLignecomplete
\end{lstlisting} 

Dans cette fonction on fait des tests. On initialise y égal à la longueur de la grille (-1) (donc 21 lignes) et le nombre de ligne complète à 0. On teste si le nombre de colonnes de la grille est supérieur ou égale à 0, puis on observe pour chaque colonne si elle contient ou pas des éléments. Si oui, une ligne complète s'ajoute. On parcourt le nombre de colonnes à l'aide d’une boucle {\color{red}for} allant de la dernière colonne à la première en décrémentant de -1, puis on parcourt aussi le nombre de lignes.\\ Pour une ligne complète de la grille, les pièces des lignes en fonction des colonnes sont éliminées et remplacées par la variable VIDE; sinon si une ligne est déjà jouée c'est-à-dire si elle n'est pas entièrement pleine ou complète, on réduit de -1 le nombre de lignes restantes dans la grille de jeu.\\ Après cela la il y aura une fonction {\color{orange}get()} qui retournera uniquement les éléments x et y de la grille. En bref, une fois que la condition de la fonction {\color{orange}lignecomplete()} est vérifiée, on ajoute une ligne au premier rang; si non, on supprime la ligne complète.

			\subsubsection{Fonction dessinant les éléments dans la grille (dessinergrille)}
C'est la dernière fonction de la classe grille, elle prend en paramètre une surface que l’on a appelé screen. Cette fonction a pour but de dessiner les pièces dans la grille en fonction du nombre des colonnes et des lignes tout d’abord on vérifie si elles sont vides si ce n’est pas le cas alors elle contient des 0 étant donné que les pièces sont constituées de 0 ainsi que de la chaîne de caractère VIDE qui constitue notre grille. Ainsi une fois que les zéros constituant nos pièces sont placés dans la grille de jeu, on les dessine sur une surface à l’aide de la fonction pygame.draw.rect qui va pixéliser nos zéros en des petits cubes constituants les parties des pièces 

	\subsection{Description de la classe Piece}
\textbf{\underline{Généralité :}} Dans cette classe on gère le comportement de la pièce dans la grille de jeu comme sa position lors de sa chute dans la grille, qui a été centrée; on vérifie la possibilité de la descente de la pièce dans la grille, on permet à la pièce de bouger et d'effectuer des rotations au niveau de la grille. La pièce suivante est aussi dessinée dans cette classe. \\ \\

On initialise les variables qui seront utilisées dans la classe on a :
\begin{itemize}
	\item forme index qui représente les pièces utilisées dans le jeu on utilise la méthode random,choice pour choisir parmi les pièces initialisées en variable globale 
	
	\item position qui représente ici la position de l’affichage de la pièce suivante dans la fenêtre,  couleur qui représente ici les différentes couleurs de pièces
	
	\item pièce{\_}suivante on sélectionne aléatoirement les pièces entre 0 et l’index des des formes dans la listes des FORMES
	
	\item et enfin forme longueur{\_}pièce et largeur pièce;
\end{itemize}

Quatre fonctions majeures composent la classe : la fonction {\color{orange}bouger} ,la fonction {\color{orange}rotation}, la fonction {\color{orange}descenteValide} et la fonction {\color{orange}dessinerpieces}. Les autres fonctions retourne uniquement certaines variables qu’on utilisera souvent dans d’autres classes.

			\subsubsection{Fonction assurant la descente des pièces dans la grille (bouger)}
Cette fonction permet la descente de la pièce dans la grille; ici on vérifie tout d’abord si la descende de la pièce est possible et cela par le biais de la fonction {\color{orange}descenteValide} puis a chaque fois on rajoute \emph{x} ou \emph{y} à ses coordonnées du moment où la descente n’est plus valide où que la pièce touche le fond de la grille ou quand elle rencontre une autre pièce on retourne {\color{purple}False}. Lors de la conception de notre jeu nous n’avons pas pensé à cette fonction lors de la phase des test nous nous sommes aperçus que les pièces restait tout en haut de la grille mais ne descendait pas, c'est par l’aide de madame Françoise Lambert, qui nous a suggéré de créer une fonction {\color{orange}bouger}, qu'on a pu faire bouger nos pièces. Il est aussi important de noter que cette fonction n'est active que si et seulement si la descente des pièces dans la grille est possible.
\begin{lstlisting}[frame=single] 
def bouger(self, x, y, GRILLE):
        if self.descenteValide(x, y, GRILLE):
            self.m_position['x'] += x
            self.m_position['y'] += y
            return True

        else:
            return False
\end{lstlisting}

			\subsubsection{Fonction vérifiant la validité de la descente d'une pièce (descenteValide)}
Ici tout d’abord à l’aide d’une double boucle {\color{red}for}, on vérifie la possibilité qu'une pièce ou que les futures pièces puisse bouger dans la grille. Dans cette double boucle parcourant les lignes et les colonnes de notre grille, on vérifie où disant qu'on s'assure que notre pièce, essentiellement formée de la chaîne de caractère \emph{VIDE} et de zéros, rencontre cette même chaîne dans la grille de jeu afin de continuer jusqu'à la prochaine itération. Une fois que notre pièce croise la chaine de caractère \emph{VIDE} dans la grille, à ses coordonnées \emph{x} et \emph{y} sont ajoutées des valeurs qui effectuerons pour ne pas dire qui mettrons à jour le mouvement de descente de la pièce au milieu de notre grille.
\begin{lstlisting}[frame=single] 
for y in range(self.LONGUEURPIECE):
   for x in range(self.m_LARGEURPIECE):
      if self.m_FORME[y][x] == VIDE:
         continue

      xPos = x + int((self.m_position['x'] + ajoutX) / TAILLE_BOITE)
      yPos = y + int((self.m_position['y'] + ajoutY) / TAILLE_BOITE)
\end{lstlisting} 

Après cette première itération on passe à la suivante qui est de voir, de vérifier si les coordonnées x de la pièce sont supérieures à zéro, ou supérieures/égales à celles des lignes ou encore si les coordonnées y de la pièce sont supérieures/égales à celles des colonnes; si tel est le cas on retourne {\color{purple}False}. De même on test aussi si les lignes et les colonnes ne contiennent pas la chaîne de caractère \emph{VIDE} où plutôt si les parties de la grille sont occupées par d’autres pièces, on retourne aussi {\color{purple}False}. Et lorsque notre test de boucle vérifie toutes ces conditions on retourne {\color{purple}True}.
\begin{lstlisting}[frame=single] 
if xPos < 0 or xPos >= LIGNES or yPos >= COLONNES:
                    return False
                if GRILLE.get(xPos, yPos) != VIDE:
                    return False
\end{lstlisting} 


			\subsubsection{Fonction assurant la rotation d'une pièce (rotation)}
Pour la rotation des différentes pièces, on vérifie tout d'abord si la place qu'occupe la pièce en fonction de sa rotation ne dépasse pas la largeur de la grille, et si ce n’est pas le cas on la pièce reste comme elle est donc on réaffecte aux variables les mêmes valeurs de façon a ce qu’elle restent dans la même position.

			\subsubsection{Fonction dessinant la pièce suivante (dessinerpiece)}
Tout simplement cette fonction a pour but de dessiner les pièces en chutes dans la grille a l’aide de la méthode {\color{brown}pygame.draw.rect}.

	\subsection{Description de la classe Commande}


	\subsection{Organisation du travail}
Concernant l'organisation du travail, nous nous ne nous sommes pas vraiment réparti les taches pour concevoir le Tetris. Nous avons réaliser en grande partie ce projet en groupe, lors de nos séances de travaux pratiques mais aussi en dehors de ces séances afin de permettre à chacun d'entre nous de mieux comprendre le code et le fonctionnement du jeu.


\end{document}
